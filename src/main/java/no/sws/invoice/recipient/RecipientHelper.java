/*
 * Copyright (C) 2009 Pål Orby, Balder Programvare AS. <http://www.balder.no/> This program is free software: you can
 * redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in
 * the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a
 * copy of the GNU General Public License along with this program. If not, see <http://www.gnu.org/licenses/>.
 */
package no.sws.invoice.recipient;

import java.util.LinkedList;
import java.util.List;

import org.jdom.Element;

import no.sws.client.SwsRequiredInvoiceValueException;

/**
 * @author Pål Orby, Balder Programvare AS
 */
public class RecipientHelper {

	/**
	 * Helper method to generate a collection of XML elements of the given Recipient values.
	 * 
	 * @param recipient The Recipient to generate XML elements of.
	 * @return A collection of XML elements generated by the Recipient values.
	 * @throws SwsRequiredInvoiceValueException If a required value isn't set on the <code>Recipient</code>
	 * @throws NullPointerException If the given recipient is null
	 */
	public static List<Element> getRecipientValuesAsXmlElements(final Recipient recipient) throws SwsRequiredInvoiceValueException {

		if(recipient == null) {
			throw new NullPointerException("The given Recipient can't be null");
		}

		final LinkedList<Element> result = new LinkedList<Element>();

		final String name = recipient.getName();
		final String zip = recipient.getZip();
		final String city = recipient.getCity();

		// name is required
		if(name == null || name.trim().length() == 0) {
			throw new SwsRequiredInvoiceValueException("name");
		}
		else {
			result.add(new Element("name").setText(name));
		}
		// zip is required
		if(zip == null || zip.trim().length() == 0) {
			throw new SwsRequiredInvoiceValueException("zip");
		}
		else {
			result.add(new Element("zip").setText(zip));
		}
		// city is required
		if(city == null || city.trim().length() == 0) {
			throw new SwsRequiredInvoiceValueException("city");
		}
		else {
			result.add(new Element("city").setText(city));
		}

		return result;
	}

	public static List<Element> getOptionalRecipientValuesAsXmlElements(Recipient recipient) {

		if(recipient == null) {
			throw new NullPointerException("Parameter recipient can't be null");
		}

		final LinkedList<Element> result = new LinkedList<Element>();

		final String recipientNo = recipient.getRecipientNo();
		final String address1 = recipient.getAddress1();
		final String address2 = recipient.getAddress2();
		final String country = recipient.getCountry();

		// recipientNo is optional
		if(recipientNo != null && recipientNo.trim().length() > 0) {
			result.add(new Element("recipientNo").setText(recipientNo));
		}

		// address1 is optional
		if(address1 != null && address1.trim().length() > 0) {
			result.add(new Element("address1").setText(address1));
		}
		// address2 is optional
		if(address2 != null && address2.trim().length() > 0) {
			result.add(new Element("address2").setText(address2));
		}

		// country is optional, the server will use NORGE if omitted
		if(country != null && country.trim().length() > 0) {
			result.add(new Element("country").setText(country));
		}

		return result;
	}

	/**
	 * Checks that the following required values are set.
	 * <ul>
	 * <li>name
	 * <li>zip
	 * <li>city
	 * </ul>
	 * 
	 * @param recipient to validate
	 * @return True or false
	 */
	public static boolean validate(Recipient recipient) {

		if(recipient == null) {
			return false;
		}
		else {
			
			if(recipient.getName() == null || recipient.getName().trim().length() == 0) {
				return false;
			}
			else if(recipient.getZip() == null || recipient.getZip().trim().length() == 0) {
				return false;
			}
			else if(recipient.getCity() == null || recipient.getCity().trim().length() == 0) {
				return false;
			}
			else {
				return true;
			}
		}
	}
}
